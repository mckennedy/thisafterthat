//------------------------------------//
//  $MIXINS
//------------------------------------//

// Micro clearfix
@mixin clearfix {
  &:after {
    display: table;
    content: "";
    clear: both;
  }
}

// Clear grid floats
@mixin n-up($number) {
  &:nth-of-type(#{$number}n + 1) {
    clear: left;
  }
}

// Clear grid float clears
@mixin clear-n-up($number) {
  &:nth-of-type(#{$number}n + 1) {
    clear: none;
  }
}

// Image replacement
@mixin hide-text {
  border: 0;
  font: 0/0 a;
  text-shadow: none;
  color: transparent;
}

// Text overflow
// Requires inline-block or block for proper styling
@mixin text-overflow {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

// WebKit-style focus
@mixin tab-focus {
  outline: 5px auto -webkit-focus-ring-color;
  outline-offset: -2px;
}

// Placeholder text
@mixin placeholder {
  // scss-lint:disable VendorPrefix
  &::-moz-placeholder { @content; } // Firefox 19+
  &:-ms-input-placeholder { @content; } // IE 10+
  &::-ms-input-placeholder { @content; } // Edge
  &::-webkit-input-placeholder { @content; } // Safari and Chrome
}

// Form validation states
@mixin form-control-validation($text-color: $gray-dark, $border-color: $gray) {
  label,
  .radio,
  .checkbox { color: $text-color; }

  .form-control {
    border-color: $border-color;

    &:focus {
      border-color: darken($border-color, 10%);
      box-shadow: 0 0 6px lighten($border-color, 20%);
    }
  }
}

// Form control focus state, based on WebKit's default styles
@mixin form-control-focus($color: #66afe9) {
  $color-rgba: rgba(red($color), green($color), blue($color), .6);

  &:focus {
    border-color: $color;
    outline: 0;
    box-shadow: inset 0 1px 1px rgba(0, 0, 0, .075), 0 0 8px $color-rgba;
  }
}


// ***************************************************************************
// Padding mixins
//
// padding-horizontal and padding-vertical apply the given amount of padding
// to padding-{left,right} and padding-{top,bottom}, respectively.
//
// USAGE:
//
// .island {
//   @include padding-vertical($base-spacing-unit);
// }
//
// ***************************************************************************

@mixin padding-horizontal($amount) {
  padding-left: $amount;
  padding-right: $amount;
}

@mixin padding-vertical($amount) {
  padding-top: $amount;
  padding-bottom: $amount;
}


// ***************************************************************************
// Media query mixin
//
// When using spaceBase, styles should be written mobile-first.
// The media mixin can override these base styles in a variety of ways:
//   - starting at a breakpoint ($from: x)
//   - up to a breakpoint ($upto: y)
//   - between two breakpoints ($from: x, $upto: y)
//   - for specific media features (e.g. retina, orientation)
//   - for different media types ($type: print)
//
// You can use breakpoint aliases set in $media-breakpoints (in _vars.scss)
// or custom widths. Pixel values will be converted to ems.
//
// Commonly-used media features are defined in $media-features (in _vars.scss).
// You can define additional feature aliases or use custom one-off expressions.
//
// It's important to note that $upto is exclusive.
// This means that `@include media($upto: 768px)` will set a max-width of 
// 47.99em (roughly 767px).
//
// USAGE:
//
// @include media($from: hand) { ... }
// @include media($upto: desk) { ... }
// @include media($from: lap, $upto: desk) { ... }
// @include media($from: 800px, $upto: 900px) { ... }
// @include media(landscape, $upto: desk) { ... }
// @include media($type: print) { ... }
// @include media('(device-radius: 50%)') { ... }
//
// OUTPUT:
//
// @media screen and (min-width: 30em) { ... }
// @media screen and (max-width: 63.99em) { ... }
// @media screen and (min-width: 48em) and (max-width: 63.99em) { ... }
// @media screen and (min-width: 50em) and (max-width: 56.25em) { ... }
// @media screen and (max-width: 63.99em) and (orientation: landscape) { ... }
// @media print { ... }
// @media screen and (device-radius: 50%) { ... }
//
// OUTPUT TO LEGACY CSS:
//
// Only the content needed to render the $legacy-media-breakpoint layout. Any
// includes with features or types other than screen will be excluded.
//
// ***************************************************************************

@mixin media($feature:false, $from:false, $upto:false, $type:screen) {
  $min-width: 0;
  $max-width: 0;
  $media-query: '';

  // From: this breakpoint (inclusive)
  @if $from {
    @if type-of($from) == number {
      $min-width: px2em($from);
    } @else if get-breakpoint-width($from) {
      $min-width: px2em(get-breakpoint-width($from));
    }
  }

  // Upto: that breakpoint (exclusive)
  @if $upto {
    @if type-of($upto) == number {
      $max-width: px2em($upto);
    } @else if get-breakpoint-width($upto) {
      $max-width: px2em(get-breakpoint-width($upto)) - .01em;
    }
  }

  // Render styles without media queries
  @if $legacy-ie == true {
    $legacy-breakpoint-width: px2em(get-breakpoint-width($legacy-media-breakpoint));
    // Output only rules that start at or span our legacy media width
    @if (
      $feature == false
      and $type == 'screen'
      and $min-width <= $legacy-breakpoint-width
      and (
        $upto == false or $max-width >= $legacy-breakpoint-width
      )
    ) {
      @content;
    }

  } @else {
    @if $min-width != 0 { $media-query: '#{$media-query} and (min-width: #{$min-width})'; }
    @if $max-width != 0 { $media-query: '#{$media-query} and (max-width: #{$max-width})'; }
    @if $feature {
      // Pass through custom expression or get defined expression
      $original-feature: $feature;
      $feature: get-feature($feature);
      @if $feature {
        $media-query: '#{$media-query} and #{$feature}';
      } @else {
        $media-query: '#{$media-query} and (#{$original-feature})';
      }
    }

    // Remove unnecessary media query prefix 'all and '
    @if ($type == 'all' and $media-query != '') {
      $type: '';
      $media-query: str-slice(unquote($media-query), 6);
    }

    @media #{$type + $media-query} {
      @content;
    }
  }
}

//The Mixin
//==========

$white : #ecf0f1;
$gray: darken($white, 30);

$midnight: #2c3e50;

$red: #e74c3c;

$peach: #ff5350;

$blue: #347EED;
$blue-dark: desaturate(darken($blue, 10), 10);
$blue-light: lighten($blue, 10);

$yellow: #FFEF35;
$yellow-light: lighten($yellow, 15);

$orange: #f39c12;

$green: #31F042;

$emerald: #2ecc71;

$turqoise: #1abc9c;

$fb-blue: #3B5998;
$twitter-blue: #4099FF;

@mixin long-shadow($type, $color, $length, $fadeout: true, $skew: false, $direction: right){
  $shadow: '';
  @if $skew == false or $type == text{
    @if $direction == right {
      @for $i from 0 to $length - 1 {
        $shadow: $shadow + $i + 'px ' + $i + 'px 0 ' + $color + ',';
      }
    }
    @if $direction == left {
      @for $i from 0 to $length - 1 {
        $shadow: $shadow + $i * -1 + 'px ' + $i + 'px 0 ' + $color + ',';
       }
      }
     }
        
   @if $fadeout == true{
    @for $i from 1 to $length - 1 {
      @if $type == text or $skew == false{
        @if $direction == right{
          $shadow: $shadow + $i + 'px ' + $i + 'px 0 ' +       rgba($color, 1 - $i / $length) + ',';
        }
        @if $direction == left{
          $shadow: $shadow + $i * -1 + 'px ' + $i + 'px 0 ' +       rgba($color, 1 - $i / $length) + ',';
        }
      }
      @if ($type == box) and $skew == true{
        @if $direction == right {
          $shadow: $shadow + $i + 'px ' + $i + 'px 0 ' + $i * .2 + 'px ' + rgba($color, 1 - $i / $length) + ',';
        }
        @if $direction == left {
          $shadow: $shadow + $i * -1 + 'px ' + $i + 'px 0 ' + $i * .2 + 'px ' + rgba($color, 1 - $i / $length) + ',';
        }
      }
  }
  $shadow: $shadow + $length + 'px ' + $length + 'px 0 ' + rgba($color, 0);
 }
 @if $fadeout == false{
   @if $skew == true and ( $type == box ){
     @for $i from 0 to $length - 1 {
            $shadow: $shadow + $i + 'px ' + $i + 'px 0 ' + $i * .1 + 'px ' + $color + ',';
      }
   }
    $shadow: $shadow + $length + 'px ' + $length + 'px 0 ' + rgba(0,0,0,0);
 }
 $shadow: unquote($shadow);
  @if $type == 'box' {box-shadow: $shadow;}
  @if $type == 'text' {text-shadow: $shadow;}
}